generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  role          Role      @default(CLIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Freelancer specific fields
  skills        Skill[]
  hourlyRate    Float?
  availability  Boolean   @default(true)
  projects      Project[] @relation("FreelancerProjects")
  
  // Client specific fields
  postedProjects Project[] @relation("ClientProjects")
  reviews        Review[]  @relation("ClientReviews")
  
  // Common relations
  receivedReviews Review[] @relation("ReceivedReviews")
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String
  budget      Float
  status      ProjectStatus @default(OPEN)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  clientId    String
  client      User     @relation("ClientProjects", fields: [clientId], references: [id])
  freelancerId String?
  freelancer  User?    @relation("FreelancerProjects", fields: [freelancerId], references: [id])
  skills      Skill[]
  proposals   Proposal[]
}

model Skill {
  id        String    @id @default(cuid())
  name      String    @unique
  users     User[]
  projects  Project[]
}

model Proposal {
  id          String   @id @default(cuid())
  coverLetter String
  price       Float
  status      ProposalStatus @default(PENDING)
  createdAt   DateTime @default(now())
  
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
}

model Review {
  id          String   @id @default(cuid())
  rating      Int
  comment     String
  createdAt   DateTime @default(now())
  
  fromId      String
  from        User     @relation("ClientReviews", fields: [fromId], references: [id])
  toId        String
  to          User     @relation("ReceivedReviews", fields: [toId], references: [id])
}

enum Role {
  CLIENT
  FREELANCER
  ADMIN
}

enum ProjectStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
}